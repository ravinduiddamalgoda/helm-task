{{- if and .Values.global.oci.enabled .Values.global.oci.credentialProvider.enabled }}
---
apiVersion: v1
kind: Job
metadata:
  name: {{ .Release.Name }}-oke-credential-provider-setup
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "common.labels" . | nindent 4 }}
    app.kubernetes.io/component: credential-provider-setup
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: oke-credential-provider-setup
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ .Release.Name }}-registry-sa
      restartPolicy: OnFailure
      tolerations:
        - operator: Exists
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/os
                operator: In
                values: ["linux"]
      containers:
        - name: setup-credential-provider
          image: curlimages/curl:8.1.0
          command:
            - /bin/sh
            - -c
            - |
              set -e
              
              echo "=== OKE Credential Provider Manual Setup ==="
              echo "This is a fallback setup method"
              echo "Date: $(date)"
              
              # Detect architecture
              ARCH="amd64"
              if [ "$(uname -m)" = "aarch64" ]; then
                ARCH="arm64"
              fi
              echo "Architecture: $ARCH"
              
              DOWNLOAD_URL="https://github.com/oracle-devrel/oke-credential-provider-for-ocir/releases/latest/download/oke-credential-provider-for-ocir-linux-$ARCH"
              echo "Download URL: $DOWNLOAD_URL"
              
              # Download to temp location
              echo "Downloading binary..."
              curl -L -f --connect-timeout 30 --max-time 300 \
                "$DOWNLOAD_URL" \
                -o /tmp/credential-provider-oke
              
              echo "Download completed, size: $(stat -c%s /tmp/credential-provider-oke 2>/dev/null || echo 'unknown')"
              
              # Verify download
              if [ ! -f /tmp/credential-provider-oke ]; then
                echo "ERROR: Download failed"
                exit 1
              fi
              
              # Make executable
              chmod +x /tmp/credential-provider-oke
              
              echo "=== Manual Installation Instructions ==="
              echo "The binary has been downloaded successfully."
              echo "Please manually copy it to each worker node:"
              echo ""
              echo "1. Copy binary to worker nodes:"
              echo "   kubectl cp namespace/pod-name:/tmp/credential-provider-oke /usr/local/bin/credential-provider-oke"
              echo ""
              echo "2. Make it executable on each node:"
              echo "   chmod 755 /usr/local/bin/credential-provider-oke"
              echo ""
              echo "3. Copy config file to each node:"
              echo "   kubectl get configmap {{ .Release.Name }}-credential-provider-config -o jsonpath='{.data.credential-provider-config\.yaml}' > /etc/kubernetes/credential-provider-config.yaml"
              echo ""
              echo "4. Restart kubelet on each node with additional args:"
              echo "   --image-credential-provider-config=/etc/kubernetes/credential-provider-config.yaml"
              echo "   --image-credential-provider-bin-dir=/usr/local/bin/"
              echo ""
              echo "Binary is ready at: /tmp/credential-provider-oke"
              
              # Keep container running for manual extraction
              sleep 3600
          volumeMounts:
            - name: credential-provider-config
              mountPath: /config
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
      volumes:
        - name: credential-provider-config
          configMap:
            name: {{ .Release.Name }}-credential-provider-config
{{- end }}
