{{- if and (eq .Values.global.deploymentMode "cluster") .Values.global.databases.mongodb.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "mongodb.fullname" . }}-backup
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
spec:
  schedule: {{ .Values.global.databases.mongodb.backup.schedule | quote }}
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: mongodb-backup
              image: "{{ .Values.backup.image.repository }}:{{ .Values.backup.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.backup.image.pullPolicy | default "IfNotPresent" }}
              command:
                - "/bin/bash"
                - "-c"
                - |
                  TIMESTAMP=$(date +%Y%m%d%H%M%S)
                  BACKUP_DIR="/backup/mongodb-$TIMESTAMP"
                  mkdir -p $BACKUP_DIR
                  
                  # Perform backup
                  mongodump --host={{ include "mongodb.fullname" . }} \
                    --port=27017 \
                    --username=$MONGO_ROOT_USER \
                    --password=$MONGO_ROOT_PASSWORD \
                    --authenticationDatabase=admin \
                    --out=$BACKUP_DIR
                  
                  # Compress backup
                  tar -czf "$BACKUP_DIR.tar.gz" -C /backup "mongodb-$TIMESTAMP"
                  rm -rf $BACKUP_DIR
                  
                  {{- if .Values.global.databases.mongodb.backup.objectStorage.enabled }}
                  # Install OCI CLI if not present
                  if ! command -v oci &> /dev/null; then
                    echo "Installing OCI CLI..."
                    pip install oci-cli
                  fi
                  
                  # Upload to OCI Object Storage
                  echo "Uploading backup to OCI Object Storage..."
                  export OCI_CLI_AUTH=instance_principal
                  oci os object put --bucket-name {{ .Values.global.databases.mongodb.backup.objectStorage.bucketName }} \
                    --file "$BACKUP_DIR.tar.gz" \
                    --name "mongodb-backups/$(date +%Y/%m/%d)/$TIMESTAMP.tar.gz" \
                    --region {{ .Values.global.databases.mongodb.backup.objectStorage.region }}
                  
                  # Verify upload was successful
                  if [ $? -eq 0 ]; then
                    echo "Backup successfully uploaded to OCI Object Storage"
                  else
                    echo "Failed to upload backup to OCI Object Storage"
                    exit 1
                  fi
                  {{- end }}
                  
                  # Cleanup old backups
                  find /backup -name "mongodb-*.tar.gz" -type f -mtime +{{ .Values.global.databases.mongodb.backup.retention }} -delete
              env:
                - name: MONGO_ROOT_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.doppler.managedSecretName }}
                      key: {{ .Values.global.databases.mongodb.selfHosted.auth.rootUserSecretKey }}
                - name: MONGO_ROOT_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.doppler.managedSecretName }}
                      key: {{ .Values.global.databases.mongodb.selfHosted.auth.rootPasswordSecretKey }}
                {{- if .Values.global.databases.mongodb.backup.objectStorage.enabled }}
                # OCI Object Storage credentials
                - name: OCI_CLI_REGION
                  value: {{ .Values.global.databases.mongodb.backup.objectStorage.region | quote }}
                {{- if .Values.global.databases.mongodb.backup.objectStorage.credentialsSecretName }}
                - name: OCI_CLI_TENANCY
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.databases.mongodb.backup.objectStorage.credentialsSecretName }}
                      key: tenancy
                - name: OCI_CLI_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.databases.mongodb.backup.objectStorage.credentialsSecretName }}
                      key: user
                - name: OCI_CLI_FINGERPRINT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.databases.mongodb.backup.objectStorage.credentialsSecretName }}
                      key: fingerprint
                - name: OCI_CLI_KEY_CONTENT
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.global.databases.mongodb.backup.objectStorage.credentialsSecretName }}
                      key: key
                {{- end }}
                {{- end }}
              volumeMounts:
                - name: backup-volume
                  mountPath: /backup
              resources:
                {{- toYaml .Values.backup.resources | nindent 16 }}
          volumes:
            - name: backup-volume
              persistentVolumeClaim:
                claimName: {{ include "mongodb.fullname" . }}-backup
          restartPolicy: OnFailure
{{- end }}

{{- if and (eq .Values.global.deploymentMode "cluster") .Values.global.databases.mongodb.backup.enabled }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ include "mongodb.fullname" . }}-backup
  namespace: {{ .Values.global.namespace | default .Release.Namespace }}
  labels:
    {{- include "mongodb.labels" . | nindent 4 }}
    app.kubernetes.io/component: backup
  {{- if and (eq .Values.global.deploymentMode "cluster") .Values.global.oci.enabled }}
  annotations:
    {{- include "common.ociBlockVolumeAnnotations" . | nindent 4 }}
  {{- end }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: {{ .Values.global.databases.mongodb.backup.storageClass | default .Values.global.storageClass }}
  resources:
    requests:
      storage: {{ .Values.global.databases.mongodb.selfHosted.persistence.size }}
{{- end }} 